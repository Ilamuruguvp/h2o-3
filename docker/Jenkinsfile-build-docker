@Library('test-shared-library@1.9') _
import ai.h2o.ci.buildsummary.StagesSummary

// initialize build summary
buildSummary('https://github.com/h2oai/h2o-3', true)
// use default StagesSummary implementation
buildSummary.get().addStagesSummary(this, new StagesSummary())

properties([
    parameters([
        booleanParam(defaultValue: false, description: 'Whether to build GPU enabled images', name: 'useGPU')
    ])
])

IMAGE_NAME_PREFIX = 'docker.h2o.ai/opsh2oai/h2o-3'
GPU_SUFFIX = params.useGpu ? '-gpu' : ''

def stages = []
def gradleVersion
def pipelineContext
def previousVersion

ansiColor('xterm') {
    timestamps {

        buildSummary.stageWithSummary('Checkout and init') {
            node ('mr-0xc10') {
                cleanWs()
                // FIXME
                // def scmEnv = checkout scm
                def scmEnv = git url: 'https://github.com/h2oai/h2o-3', branch: 'mr/ita/341-multiple-images'

                sh "cat gradle/wrapper/gradle-wrapper.properties | grep distributionUrl | egrep -o '([0-9]+\\.+)+[0-9]+'"
                gradleVersion = sh(script: "cat gradle/wrapper/gradle-wrapper.properties | grep distributionUrl | egrep -o '([0-9]+\\.+)+[0-9]+'", returnStdout: true).trim()
                echo "Gradle version: ${gradleVersion}"

                def final pipelineContextFactory = load('scripts/jenkins/groovy/pipelineContext.groovy')
                pipelineContext = pipelineContextFactory('.', 'MODE_BUILD_DOCKER', scmEnv, true)
                previousVersion = pipelineContext.getBuildConfig().getDefaultImageVersion() - 1

                dir('docker') {
                    stash name: 'docker-sources'
                }
            }
        }

        buildSummary.stageWithSummary('Build dev-base') {
            node('mr-0xc10') {
                dir('dev-base') {
                    deleteDir()
                    unstash 'docker-sources'
                    if (previousVersion > 0) {
                        sh "docker pull ${IMAGE_NAME_PREFIX}/dev-base:${previousVersion}"
                    }
                    sh """
                        docker build \
                            -t ${IMAGE_NAME_PREFIX}/dev-base${GPU_SUFFIX}:${pipelineContext.getBuildConfig().getDefaultImageVersion()} \
                            -f jenkins-images/Dockerfile-base \
                            --build-arg FROM_IMAGE=${params.useGPU ? 'nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04' : 'ubuntu:16.04'} \
                            .
                        docker push ${IMAGE_NAME_PREFIX}/dev-base${GPU_SUFFIX}:${pipelineContext.getBuildConfig().getDefaultImageVersion()}
                    """
                }
            }
        }

        JDK_BASE_IMAGES = [
                'dev-jdk-8-base': [dockerfile: 'Dockerfile-jdk-8-base'],
                'dev-jdk-others-base': [dockerfile: 'Dockerfile-jdk-others-base'],
        ]
        buildInParallel(pipelineContext, previousVersion, JDK_BASE_IMAGES)

        COMPONENT_BASE_IMAGES = [
                'dev-python-base': [dockerfile: 'Dockerfile-python-base'],
                'dev-r-base': [dockerfile: 'Dockerfile-r-base'],
        ]
        buildInParallel(pipelineContext, previousVersion, COMPONENT_BASE_IMAGES)

        COMPONENT_IMAGES = [:]
        PYTHON_VERSIONS = ['2.7', '3.5', '3.6']
        PYTHON_VERSIONS.each {version ->
            COMPONENT_IMAGES["dev-python-${version}"] = [dockerfile: 'Dockerfile-python', buildArgs: ["PYTHON_VERSION=${version}"]]
        }
        R_VERSION = ['3.4.1', '3.3.3']
        R_VERSION.each {version ->
            COMPONENT_IMAGES["dev-r-${version}"] = [dockerfile: 'Dockerfile-r', buildArgs: ["R_VERSION=${version}"]]
        }
        JDK_VERSIONS = ['10', '11']
        JDK_VERSIONS.each {version ->
            COMPONENT_IMAGES["dev-jdk-${version}"] = [dockerfile: 'Dockerfile-jdk-others', buildArgs: ["JAVA_VERSION=${version}"]]
        }
        buildInParallel(pipelineContext, previousVersion, COMPONENT_IMAGES)

        BUILD_BASE_IMAGE = [
                "dev-build-base": [dockerfile: 'Dockerfile-build-base']
        ]
        buildInParallel(pipelineContext, previousVersion, BUILD_BASE_IMAGE)

        BUILD_IMAGE = [
                "dev-build-${gradleVersion}": [dockerfile: 'Dockerfile-build']
        ]
        buildInParallel(pipelineContext, previousVersion, BUILD_IMAGE)
    }
}

private buildInParallel(final pipelineContext, final previousVersion, final images) {
    parallel(images.collectEntries { image, config ->
        [
            image, {
                buildSummary.stageWithSummary("Build ${image}") {
                    node ('mr-0xc10') {
                        dir (image) {
                            deleteDir()
                            unstash 'docker-sources'
                            if (previousVersion > 0) {
                                sh "docker pull ${IMAGE_NAME_PREFIX}/${image}:${previousVersion}"
                            }
                            config.buildArgs = config.buildArgs ?: []
                            def buildArgsStr = config.buildArgs.collect{ arg -> "--build-arg ${arg}"}.join(' ')
                            sh """
                                    docker build \
                                        -t ${IMAGE_NAME_PREFIX}/${image}:${pipelineContext.getBuildConfig().getDefaultImageVersion()} \
                                        -f jenkins-images/${config.dockerfile} \
                                        --build-arg FROM_VERSION=${pipelineContext.getBuildConfig().getDefaultImageVersion()} \
                                        --build-arg GPU_SUFFIX=${GPU_SUFFIX} \
                                        ${buildArgsStr} \
                                        .
                                    docker push ${IMAGE_NAME_PREFIX}/${image}:${pipelineContext.getBuildConfig().getDefaultImageVersion()}
                                """
                        }
                    }
                }
            }
        ]
    })
}